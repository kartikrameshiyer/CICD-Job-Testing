# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.3.0
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
# Use a package of configuration called an orb.
# Anchors and Alias
defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

# Re-usuable commands.
commands:
  sayhello:
    description: " A very simple command for demonstrating the purposes for commands"
    parameters:
      to:
        type: string
        default: "Hello world"
    steps:
      - run: echo << parameters.to >>

  destroy_environment:
    description: " Commands to delete the stack in case there is a failure "
    parameters:
    steps:
      - run:
          name: Delete the stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name demostack --region us-west-2

jobs:
  save_hello_world_output:
    <<: *defaults
    steps:
      - run: echo "Hello kartik, this is called sharing files" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_output_file:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  # adding another job to check the commands fucntionality
  checkcommand:
    <<: *defaults
    steps:
      - sayhello:
          to: "Congrats! you have sucessfully implemented Commands, Anchors and Alias."
  # Roll back code to clean up when build fails.
  checkRollBack:
    <<: *defaults
    steps:
      - run: return 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail

  smokeTest:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: install aws
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Smoke test
          command: |
            if curl -s --head "https://google333.com" 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment

  configure_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create infrastructure
          command: |
            aws cloudformation create-stack \
              --stack-name demostack \
              --template-body file://template.yml \
              --region us-west-2

  #Creating a EC2 instance

  createEc2:
    <<: *defaults
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: udacity
      - run:
          name: configure aws-cli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      - run: aws ec2 run-instances --image-id ami-07a29e5e945228fa1 --count 1 --instance-type t2.micro --region=us-west-2 --tag-specifications 'ResourceType=instance,Tags=[{Key=Project,Value=udacity}]'

  getEC2Ip:
    <<: *defaults
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: udacity
      - run: aws ec2 describe-instances --region us-west-2 --query 'Reservations[*].Instances[*].[PublicIpAddress,Tags[*]]' --filters "Name=tag:Project,Values=udacity" --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - run: cat ~/inventory.txt

workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - configure_infrastructure
      - smokeTest:
          requires:
            - configure_infrastructure

      # - smokeTest
      # - save_hello_world_output:
      #     requires:
      #       - smokeTest
      # - print_output_file:
      #     requires:
      #       - save_hello_world_output
      # - checkcommand:
      #     requires:
      #       - print_output_file

      # - checkRollBack:
      #     requires:
      #       - checkcommand
      # - createEc2
      # - getEC2Ip:
      #     requires:
      #       - createEc2
